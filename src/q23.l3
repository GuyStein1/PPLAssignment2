(define make-error (lambda (msg) (cons 'error msg)))

(define is-error?
  (lambda (x)
    (if (pair? x)
        (eq? (car x) 'error)
        #f)))

(define bind
  (lambda (x f)
    (if (is-error? x)
        x
        (f x))))

(define member?
  (lambda (x lst)
    (if (pair? lst)
        (or (eq? x (car lst))
            (member? x (cdr lst)))
        #f)))

(define has-duplicates?
  (lambda (keys)
    (if (pair? keys)
        (if (member? (car keys) (cdr keys))
            #t
            (has-duplicates? (cdr keys)))
        #f)))

(define collect-keys
  (lambda (x)
    (if (pair? x)
        (cons (car (car x)) (collect-keys (cdr x)))
        '())))

(define dict-structure-ok?
  (lambda (x)
    (if (eq? x '())
        #t
        (if (not (pair? x))
            #f
            (if (not (pair? (car x)))
                #f
                (if (not (symbol? (car (car x))))
                    #f
                    (if (pair? (cdr (car x)))
                        (if (eq? '() (cdr (cdr (car x))))
                            #f
                            (dict-structure-ok? (cdr x)))
                        (dict-structure-ok? (cdr x)))))))))



(define dict?
  (lambda (x)
    (and (dict-structure-ok? x)
         (not (has-duplicates? (collect-keys x))))))

(define dict
  (lambda (x)
    (if (dict? x)
        x
        (make-error "Invalid dictionary"))))

(define get
  (lambda (d k)
    (if (pair? d)
        (if (eq? (car (car d)) k)
            (cdr (car d))
            (get (cdr d) k))
        (make-error "Key not found"))))
